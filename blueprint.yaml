blueprint:
  name: Versatile Smart Knob Control (V7 - Cluster Corrected)
  description: >-
    Fully-featured control for smart knobs (like Moes/TuYa TS004F).
    This version uses cluster_id to correctly handle events from "chatty" devices.
    - Single/Double/Long Press (for device and mode switching)
    - Rotation (for value changes)
  domain: automation
  input:
    remote:
      name: Smart Knob Remote
      description: Select the smart knob device.
      selector:
        device:
          integration: zha
          model: TS004F
    target_devices:
      name: Target Devices
      description: A list of light or fan entities to control.
      selector:
        entity:
          domain:
            - light
            - fan
          multiple: true
    device_index_helper:
      name: Device Index Helper
      description: The 'input_number' helper that stores the current device index.
      selector:
        entity:
          domain: input_number
    control_mode_helper:
      name: Control Mode Helper
      description: The 'input_select' helper that stores the current control mode.
      selector:
        entity:
          domain: input_select
    step_size_pct:
      name: Brightness Step Percentage
      description: The percentage to adjust brightness on each rotation tick.
      default: 10
      selector:
        number:
          min: 1
          max: 50
          unit_of_measurement: "%"

# Mode: Restart handles "chatty" devices that fire multiple events for one action.
mode: restart
max_exceeded: silent

trigger:
  - platform: event
    event_type: zha_event
    event_data:
      device_id: !input remote

action:
  - variables:
      command: "{{ trigger.event.data.command }}"
      cluster_id: "{{ trigger.event.data.cluster_id }}"
      # Use the 'params' dictionary from your logs for rotation data
      params: "{{ trigger.event.data.params | default({}) }}"
      target_entities: !input target_devices
      device_index_helper: !input device_index_helper
      control_mode_helper: !input control_mode_helper
      current_index: "{{ states(device_index_helper) | int(0) }}"
      current_mode: "{{ states(control_mode_helper) }}"
      entity_count: "{{ target_entities | count }}"
      step_pct_value: !input step_size_pct

  - choose:
      # Single Press: Listens for press command on Cluster 6
      - conditions:
          - "{{ cluster_id == 6 }}"
          - "{{ command == 'remote_button_short_press' }}"
        sequence:
          - service: homeassistant.toggle
            target:
              entity_id: "{{ target_entities[current_index] }}"

      # Double Press: Listens for double press command on Cluster 6
      - conditions:
          - "{{ cluster_id == 6 }}"
          - "{{ command == 'remote_button_double_press' }}"
        sequence:
          - service: input_number.set_value
            target:
              entity_id: !input device_index_helper
            data:
              value: "{{ (current_index + 1) % entity_count }}"

      # Long Press: Listens for long press command on Cluster 6
      - conditions:
          - "{{ cluster_id == 6 }}"
          - "{{ command == 'remote_button_long_press' }}"
        sequence:
          - service: input_select.select_next
            target:
              entity_id: !input control_mode_helper
            data:
              cycle: true

      # Rotate Right: Listens for step command on Cluster 8
      - conditions:
          - "{{ cluster_id == 8 }}"
          - "{{ command == 'step' }}"
          - "{{ params.step_mode == 0 }}"
        sequence:
          - choose:
              - conditions: "{{ current_mode == 'Brightness' }}"
                sequence:
                  - service: light.turn_on
                    data:
                      brightness_step_pct: !input step_size_pct
                    target:
                      entity_id: "{{ target_entities[current_index] }}"
              # Add other modes (Temperature, Color) here if needed, following the same pattern

      # Rotate Left: Listens for step command on Cluster 8
      - conditions:
          - "{{ cluster_id == 8 }}"
          - "{{ command == 'step' }}"
          - "{{ params.step_mode == 1 }}"
        sequence:
          - choose:
              - conditions: "{{ current_mode == 'Brightness' }}"
                sequence:
                  - variables:
                      step_down: "{{ -1 * step_pct_value }}"
                  - service: light.turn_on
                    data:
                      brightness_step_pct: "{{ step_down }}"
                    target:
                      entity_id: "{{ target_entities[current_index] }}"
              # Add other modes (Temperature, Color) here if needed, following the same pattern
