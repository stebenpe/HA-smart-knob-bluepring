blueprint:
  name: Versatile Smart Knob Control V4
  description: >-
    Control multiple devices with a smart knob. Requires an input_number and an input_select helper.
    - Single press: Toggle on/off
    - Double press: Cycle through devices
    - Long press: Cycle through control modes (brightness, temperature, color)
    - Rotate: Adjust the selected mode's value
  domain: automation
  input:
    knob_remote:
      name: Smart Knob Remote
      description: Select the smart knob device.
      selector:
        device:
          integration: zha
          manufacturer: _TZ3000_gwkzibhs
          model: TS004F
    target_devices:
      name: Target Devices
      description: A list of light or fan entities to control.
      selector:
        entity:
          domain:
            - light
            - fan
          multiple: true
    device_index_helper:
      name: Device Index Helper
      description: The 'input_number' helper that stores the current device index.
      selector:
        entity:
          domain: input_number
    control_mode_helper:
      name: Control Mode Helper
      description: The 'input_select' helper that stores the current control mode.
      selector:
        entity:
          domain: input_select
    step_size_pct:
      name: Brightness Step Percentage
      description: The percentage to adjust brightness on each rotation tick.
      default: 10
      selector:
        number:
          min: 1
          max: 50
          unit_of_measurement: "%"

trigger:
  - platform: event
    event_type: zha_event
    event_data:
      device_id: !input knob_remote

action:
  - variables:
      command: "{{ trigger.event.data.command }}"
      args: "{{ trigger.event.data.args }}"
      target_entities: !input target_devices
      device_index_helper: !input device_index_helper
      control_mode_helper: !input control_mode_helper
      current_index: "{{ states(device_index_helper) | int(0) }}"
      current_mode: "{{ states(control_mode_helper) }}"
      entity_count: "{{ target_entities | count }}"

  - choose:
      # Single Press: {'press_type': 0}
      - conditions: "{{ command == 'press' and args.press_type == 0 }}"
        sequence:
          - service: homeassistant.toggle
            target:
              entity_id: "{{ target_entities[current_index] }}"

      # Double Press: {'press_type': 1}
      - conditions: "{{ command == 'press' and args.press_type == 1 }}"
        sequence:
          - service: input_number.set_value
            target:
              entity_id: !input device_index_helper
            data:
              value: "{{ (current_index + 1) % entity_count }}"

      # Long Press: {'press_type': 2}
      - conditions: "{{ command == 'press' and args.press_type == 2 }}"
        sequence:
          - service: input_select.select_next
            target:
              entity_id: !input control_mode_helper
            data:
              cycle: true

      # Rotate Right: {'step_mode': 0}
      - conditions: "{{ command == 'step' and args.step_mode == 0 }}"
        sequence:
          - choose:
              - conditions: "{{ current_mode == 'Brightness' }}"
                sequence:
                  - service: light.turn_on
                    data:
                      brightness_step_pct: !input step_size_pct
                    target:
                      entity_id: "{{ target_entities[current_index] }}"
              - conditions: "{{ current_mode == 'Temperature' and 'color_temp' in state_attr(target_entities[current_index], 'supported_color_modes')|default([]) }}"
                sequence:
                  - service: light.turn_on
                    data:
                      color_temp_step: 150
                    target:
                      entity_id: "{{ target_entities[current_index] }}"
              - conditions: "{{ current_mode == 'Color' and ('hs' in state_attr(target_entities[current_index], 'supported_color_modes')|default([]) or 'rgb' in state_attr(target_entities[current_index], 'supported_color_modes')|default([])) }}"
                sequence:
                  - service: light.turn_on
                    data:
                      hue_step: 30
                    target:
                      entity_id: "{{ target_entities[current_index] }}"

      # Rotate Left: {'step_mode': 1}
      - conditions: "{{ command == 'step' and args.step_mode == 1 }}"
        sequence:
          - choose:
              # THIS IS THE FULLY CORRECTED SECTION
              - conditions: "{{ current_mode == 'Brightness' }}"
                sequence:
                  - variables:
                      step_down: "{{ -1 * !input step_size_pct }}"
                  - service: light.turn_on
                    data:
                      brightness_step_pct: "{{ step_down }}"
                    target:
                      entity_id: "{{ target_entities[current_index] }}"
              # END OF CORRECTED SECTION
              - conditions: "{{ current_mode == 'Temperature' and 'color_temp' in state_attr(target_entities[current_index], 'supported_color_modes')|default([]) }}"
                sequence:
                  - service: light.turn_on
                    data:
                      color_temp_step: -150
                    target:
                      entity_id: "{{ target_entities[current_index] }}"
              - conditions: "{{ current_mode == 'Color' and ('hs' in state_attr(target_entities[current_index], 'supported_color_modes')|default([]) or 'rgb' in state_attr(target_entities[current_index], 'supported_color_modes')|default([])) }}"
                sequence:
                  - service: light.turn_on
                    data:
                      hue_step: -30
                    target:
                      entity_id: "{{ target_entities[current_index] }}"
mode: single
